import java.util.ArrayList;// import java.util.Iterator;import java.util.Random;import javax.swing.text.PlainDocument;public class SnakeandLadder {    ArrayList<Snake> snakes = new ArrayList<Snake>();    ArrayList<Ladder> ladders = new ArrayList<Ladder>();    ArrayList<Player> players = new ArrayList<Player>();    int CurrentPlayer;    public SnakeandLadder() {        CurrentPlayer = 0;    }    public void addSnake(int start, int end) throws Exception {        // Adds a snake to the board. Throws InvalidSnakeException if:        // - start is less than end        // - start is 1 or 100        if ((start <= end) || (start <= 1 || start >= 100) || (end < 1 || end >= 100)) {            throw new Exception("Invalid Snake");        }        Snake s = new Snake(start, end);        this.snakes.add(s);    }    public void addLadder(int start, int end) throws Exception {        // Adds a ladder to the board. Throws InvalidLadderException if:        // - start is greater than end        // - start is 1 or 100        if ((start >= end) || (start < 1 || start >= 100) || (end <= 1 || end >= 100)) {            throw new Exception("Invalid Ladder");        }        Ladder s = new Ladder(start, end);        this.ladders.add(s);    }    private void sortPlayers() {        // selection sort        for (int i = 0; i < players.size() - 1; i++) {            int min = i;            for (int j = i + 1; j < players.size(); j++) {                if (players.get(j).age < players.get(min).age) {                    min = j;                }            }            System.out.println();            Player temp = players.get(i);            players.set(i, players.get(min));            players.set(min, temp);        }    }    public void addPlayer(Player player) {        // Adds a player to the board. Throws PlayerLimitReachedException if:        // - Players exceed 6        if (players.size() >= 6){            System.out.println("Players maximum limit reached");        } else {            this.players.add(player);            sortPlayers();                    }    }    public Player nextPlayer() {        // Returns the next player to play based on age (youngest to oldest)        // Todo sort by age in ascending order                Player p = this.players.get(this.CurrentPlayer);        this.CurrentPlayer += 1;        if (this.CurrentPlayer == this.players.size()) {            this.CurrentPlayer = this.CurrentPlayer % this.players.size();        }return p;    }    public boolean hasWinner() {        if (this.getWinner()==(null)){            return false;        }return true;    }    public void movePlayer(Player p, int diceValue) {        // Moves the player by diceValue positions.        // Ensures position doesn't exceed 100.        if (p.curr + diceValue <= 100) {            p.curr = p.curr + diceValue;        }            }    public Player getWinner() {        // Returns the winner or null if there's no winner yet        for (Player p : players) {            if (getPosition(p) == 100) {                return p;            }        }        return null;    }    public int getPosition(Player p) {        // Returns the current position of the player        return p.curr;    }    public static void main(String[] args) throws Exception{        SnakeandLadder sl = new SnakeandLadder();        sl.addSnake(99, 66);        sl.addSnake(18, 6 );        sl.addSnake(45, 17 );                sl.addLadder(5, 31);        sl.addLadder(28, 79);        sl.addLadder(41, 68);        sl.addLadder(61, 94);        sl.addPlayer(new Player("Ajay", 22));        sl.addPlayer(new Player("vijay", 12));        sl.addPlayer(new Player("ganesh", 32));        while(sl.hasWinner()==false){            System.out.println("***************************");            Player p = sl.nextPlayer();            int v = Dice.roll();            System.out.println(p.Name + " is playing at "+p.curr+" got "+v);            sl.movePlayer(p, v);            for(Snake s : sl.snakes){                if (s.head == p.curr){                    System.out.println("Snake bite "+s.head+" "+s.tail);                    p.curr = s.tail;                    break;                }            }            for(Ladder l : sl.ladders){                if (l.start == p.curr){                    System.out.println("Ladder Climb "+l.start+" "+l.end);                    p.curr = l.end;                    break;                }            }            System.out.println("***************************");        }        System.out.println(sl.getWinner());                }}class Player {    String Name;    int age;    int curr;    @Override    public String toString() {        return Name + ", Age: " + age + ", Current Position: " + curr;    }    public Player(String name, int age) {        this.Name = name;        this.age = age;        this.curr = 0;    }}class Dice {    public static int roll() {        Random randomGenerator = new Random();        return randomGenerator.nextInt(6) + 1; // Random value between 1 and 6    }}class Snake {    int head;    int tail;    public Snake(int head, int tail) {        this.head = head;        this.tail = tail;    }}class Ladder {    int start;    int end;    public Ladder(int start, int end) {        this.start = start;        this.end = end;    }}